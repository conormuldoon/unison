[{"/home/conor/code/unison/front-end/src/index.tsx":"1","/home/conor/code/unison/front-end/src/Unison.tsx":"2","/home/conor/code/unison/front-end/src/LeafletMap.tsx":"3","/home/conor/code/unison/front-end/src/ARLocationComponent.tsx":"4","/home/conor/code/unison/front-end/src/Constant.tsx":"5","/home/conor/code/unison/front-end/src/Util.tsx":"6","/home/conor/code/unison/front-end/src/LocationForm.tsx":"7","/home/conor/code/unison/front-end/src/RemoveComponent.tsx":"8","/home/conor/code/unison/front-end/src/ChartPopup.tsx":"9","/home/conor/code/unison/front-end/src/TabsComponent.tsx":"10","/home/conor/code/unison/front-end/src/ChartComponent.tsx":"11","/home/conor/code/unison/front-end/src/DateSelector.tsx":"12","/home/conor/code/unison/front-end/src/registerServiceWorker.js":"13"},{"size":900,"mtime":1631545566943,"results":"14","hashOfConfig":"15"},{"size":9517,"mtime":1631641393759,"results":"16","hashOfConfig":"15"},{"size":3109,"mtime":1631628222292,"results":"17","hashOfConfig":"15"},{"size":1083,"mtime":1631627913200,"results":"18","hashOfConfig":"15"},{"size":363,"mtime":1631614366157,"results":"19","hashOfConfig":"15"},{"size":1551,"mtime":1631629340091,"results":"20","hashOfConfig":"15"},{"size":5113,"mtime":1631628299240,"results":"21","hashOfConfig":"15"},{"size":1650,"mtime":1631628360509,"results":"22","hashOfConfig":"15"},{"size":3718,"mtime":1631640423371,"results":"23","hashOfConfig":"15"},{"size":1932,"mtime":1631628387873,"results":"24","hashOfConfig":"15"},{"size":4636,"mtime":1631640353419,"results":"25","hashOfConfig":"15"},{"size":1115,"mtime":1631641453295,"results":"26","hashOfConfig":"15"},{"size":4384,"mtime":1631629493728,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},"11oiftp",{"filePath":"31","messages":"32","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"30"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"58"},"/home/conor/code/unison/front-end/src/index.tsx",[],[],"/home/conor/code/unison/front-end/src/Unison.tsx",["59","60"],"\nimport React, { useState, useEffect } from 'react';\nimport 'react-day-picker/lib/style.css';\nimport { formatDate } from 'react-day-picker/moment';\nimport './App.css';\nimport ARLocationComponent from './ARLocationComponent';\nimport { FORMAT, SELF } from './Constant';\nimport DateSelector from './DateSelector';\nimport { today, tomorrow, problemConnecting, varMapping } from './Util';\nimport HttpStatus from 'http-status-codes';\n\nimport { MapMarker } from './LeafletMap';\n\nimport { createLocationFactory } from './LocationForm';\n\nimport { createRemoveFactory } from './RemoveComponent';\nimport { createPopupFactory } from './ChartPopup';\nimport parser from 'uri-template';\n\n\ninterface UnisonProps {\n\n  createMap: (marker: MapMarker[] | null,\n    markerCallback: (locationName: string) => void,\n    popupFactory?: (closePopup: () => void) => React.ReactNode) => JSX.Element | undefined;\n\n  logoLeft?: React.ReactNode;\n  logoRight?: React.ReactNode;\n}\n\n\ntype ModelLink = {\n  \"self\": string,\n  \"contains\": string\n\n}\n\n\n\nclass ResponseError extends Error {\n\n  private status: number;\n\n  constructor(message: string, status: number) {\n    super(message);\n    this.status = status;\n  }\n\n  logStatus() {\n\n    console.error(\"HTTP status code: \" + status);\n\n  }\n}\n\nfunction checkResponse(response: Response, endpoint: string) {\n  if (!response.ok)\n    throw new ResponseError('Bad response for ' + endpoint, response.status);\n}\n\n\nconst halGetHeader: RequestInit = {\n  method: 'GET',\n  credentials: 'omit',\n  headers: new Headers({\n    'Accept': 'application/hal+json'\n  }),\n\n}\n\nfunction createLinkMap(listItem: any) {\n  const itemMap = new Map<string, string>();\n  for (const rel in listItem) {\n    itemMap.set(rel, listItem[rel].href);\n\n  }\n  return itemMap;\n}\n\nconst spaceToUnderscore = (s: string) => {\n  return s.replace(/ /g, '_')\n}\n\ntype Link = Map<string, string>;\n\n/**\n * Application component for Unison. Once mounted, it connects to the back-end to receive a list of the locations being tracked.\n * \n * @component\n * \n */\nfunction Unison({ createMap, logoLeft, logoRight }: UnisonProps): JSX.Element {\n\n\n  const [fromDate, setFromDate] = useState(today());\n  const [toDate, setToDate] = useState(tomorrow());\n  const [option, setOption] = useState<string[] | null>(null);\n  const [marker, setMarker] = useState<MapMarker[] | null>(null);\n  const [curLoc, setCurLoc] = useState<string | null | undefined>(null);\n  const [curVar, setCurVar] = useState<string | null>(null);\n  const [varOpt, setVarOpt] = useState<string[] | null>(null);\n  const [locationMap, setLocationMap] = useState<Map<string, Link> | null>(null);\n  const [modelLink, setModelLink] = useState<ModelLink | null>(null);\n\n  async function requestFeatureCollection(uri: string) {\n    const response = await fetch(uri, {\n      method: 'GET',\n      credentials: 'omit',\n      headers: new Headers({\n        'Accept': 'application/geo+json'\n      })\n    });\n\n\n    checkResponse(response, uri);\n\n    const fc = await response.json();\n\n    const locationArray = fc.features;\n    const n = locationArray.length;\n\n    const newOption = [];\n    const newMarker: MapMarker[] = [];\n\n    for (let i = 0; i < n; i++) {\n      newOption.push(locationArray[i].properties.name);\n      const pos: [number, number] = [locationArray[i].geometry.coordinates[1], locationArray[i].geometry.coordinates[0]];\n\n      const properties = locationArray[i].properties;\n      newMarker.push({ name: properties.name, position: pos });\n\n    }\n\n    if (n > 0) {\n\n      setOption(newOption);\n      setMarker(newMarker);\n\n\n    } else {\n      setOption(null);\n      setMarker(null);\n    }\n\n\n  }\n\n  function clearCurrent() {\n\n    setCurLoc(null);\n    setCurVar(null);\n    setVarOpt(null);\n    setLocationMap(null);\n\n  }\n\n  function processModelList(list: any) {\n\n    const n = list.length;\n    const map = new Map();\n\n    for (let i = 0; i < n; i++) {\n\n      map.set(list[i].name, createLinkMap(list[i]._links));\n    }\n\n    setLocationMap(map);\n\n    const varOpt = [];\n\n    if (n > 0) {\n\n      for (const rel in list[0]._links) {\n        if (SELF === rel) {\n          continue;\n        }\n\n        const s = rel.charAt(0).toUpperCase() + rel.substring(1);\n        let optName = '';\n        let sw = 0;\n        for (let i = 1; i < s.length; i++) {\n          const c = s.charAt(i);\n          if (c >= 'A' && c <= 'Z') {\n            optName += s.substring(sw, i) + ' ';\n            sw = i;\n          }\n        }\n        optName += s.substring(sw);\n        varOpt.push(optName);\n      }\n    }\n\n    if (varOpt.length > 0) {\n      setCurLoc(list[0].name);\n      setCurVar(varOpt[0]);\n      setVarOpt(varOpt);\n\n    } else {\n\n      clearCurrent();\n      alert(\"No weather data is associated with the collection.\")\n    }\n  }\n\n  async function requestCollectionHAL(uri: string) {\n\n    const response = await fetch(uri, halGetHeader);\n\n\n    checkResponse(response, uri);\n\n    const model = await response.json();\n\n\n    setModelLink({ self: model._links.self.href, contains: model._links.contains.href });\n\n\n    if (model._embedded) {\n      processModelList(model._embedded.locationModelList);\n    } else {\n      clearCurrent();\n    }\n\n\n  }\n\n  const obtainData = () => {\n\n\n    async function requestModel() {\n      try {\n\n        const root = process.env.PUBLIC_URL;\n\n        const response = await fetch(root, {\n          method: 'GET',\n          credentials: 'omit',\n          headers: new Headers({\n            'Accept': 'application/hal+json'\n          })\n        });\n\n        checkResponse(response, root);\n        const model = await response.json();\n        const uri = model._links.locationCollection.href;\n        await requestCollectionHAL(uri);\n        await requestFeatureCollection(uri);\n\n      } catch (e) {\n        if (e instanceof ResponseError) {\n          e.logStatus();\n\n        } else {\n          console.log(e);\n        }\n        problemConnecting();\n\n\n      }\n\n    }\n\n    requestModel();\n\n\n\n\n  };\n\n  useEffect(() => {\n\n    obtainData();\n  }, []);\n\n\n\n  const markerClicked = (location: string) => {\n    setCurLoc(location);\n\n  }\n\n  const _onLocationSelect = (event: React.ChangeEvent<HTMLSelectElement>) => {\n\n    setCurLoc(event.target.value);\n\n  }\n\n  const _onVarSelect = (event: React.ChangeEvent<HTMLSelectElement>) => {\n\n    setCurVar(event.target.value);\n\n  }\n\n  const handleStartChange = (selectedDate: Date) => {\n    setFromDate(formatDate(selectedDate, FORMAT));\n\n  }\n\n  const handleEndChange = (selectedDate: Date) => {\n\n    setToDate(formatDate(selectedDate, FORMAT));\n\n  }\n\n\n\n  function expandLink() {\n\n    if (locationMap && curLoc && curVar) {\n      const linkMap = locationMap.get(curLoc);\n      if (linkMap) {\n        const href = linkMap.get(varMapping(curVar));\n        const template = parser.parse(href);\n        return template.expand({ name: curLoc, fromDate: fromDate, toDate: toDate });\n      }\n    }\n\n\n  }\n\n  const handleCSV = async () => {\n\n\n    const response = await fetch(expandLink(), {\n      credentials: 'omit'\n    });\n\n    if (response.ok && curVar && curLoc) {\n      const blob = await response.blob();\n      const a = document.createElement('a');\n      a.href = window.URL.createObjectURL(blob);\n      a.download = spaceToUnderscore(curLoc) + '_' + spaceToUnderscore(curVar) + '_'\n        + fromDate + \"_\" + toDate + '.csv';\n      a.click();\n    } else if (response.status === HttpStatus.GATEWAY_TIMEOUT) {\n      problemConnecting();\n    }\n  }\n\n\n  function createSelector(label: string, dateValue: Date, handleDayChange: (day: Date) => void) {\n    return <DateSelector label={label} dateValue={dateValue} handleDayChange={handleDayChange} />;\n  }\n\n  let popupFactory;\n  if (curLoc && curVar) {\n    const uri = expandLink();\n    popupFactory = createPopupFactory(uri, curVar, curLoc);\n  }\n\n  let arc = null;\n  if (modelLink) {\n    let createRemove = null;\n\n\n    if (curLoc && curLoc.link && locationMap) {\n\n      const linkMap = locationMap.get(curLoc);\n      if (linkMap) {\n        createRemove = createRemoveFactory(obtainData, curLoc, linkMap.get(SELF));\n      }\n    }\n    arc = <ARLocationComponent createLocation={createLocationFactory(obtainData, modelLink.self, modelLink.contains)}\n      createRemove={createRemove} />\n  }\n\n  return (\n\n    <div id=\"mapdiv\">\n\n      <div id=\"logos\" style={{ textAlign: \"center\" }} >\n\n        {logoLeft}\n        {logoRight}\n\n\n      </div>\n\n      {createMap(marker, markerClicked, popupFactory)}\n\n      <div id=\"selectdiv\" style={{ textAlign: \"center\" }}>\n\n        <div>\n          {curLoc && <div id='variDD' >\n\n            {varOpt && <select onChange={_onVarSelect}>\n\n              {varOpt.map((opt) => <option key={opt} value={opt}>{opt}</option>)}\n\n            </select>}\n\n          </div>}\n\n          {curLoc && <div className='marginItem' >\n\n            <select onChange={_onLocationSelect} value={curLoc}>\n              {!option && <option key=\"Location\" value=\"Location\" >Location</option>}\n              {option && option.map((opt) => <option key={opt} value={opt}>{opt}</option>)}\n\n            </select>\n\n          </div>}\n\n\n          <div className='pLeft' >{\n            createSelector(\"From date\", fromDate, handleStartChange)\n          }\n          </div>\n\n          <div className='pLeft' >\n            {\n              createSelector(\"To date\", toDate, handleEndChange)\n            }\n          </div>\n\n\n          {curLoc && curVar && <div className='pLeft'> <button onClick={handleCSV}>CSV</button> </div>}\n        </div>\n\n        {arc}\n\n\n      </div>\n\n    </div>\n  );\n\n}\n\n\nexport default Unison;\n","/home/conor/code/unison/front-end/src/LeafletMap.tsx",[],"/home/conor/code/unison/front-end/src/ARLocationComponent.tsx",[],"/home/conor/code/unison/front-end/src/Constant.tsx",[],"/home/conor/code/unison/front-end/src/Util.tsx",[],"/home/conor/code/unison/front-end/src/LocationForm.tsx",[],"/home/conor/code/unison/front-end/src/RemoveComponent.tsx",[],"/home/conor/code/unison/front-end/src/ChartPopup.tsx",[],"/home/conor/code/unison/front-end/src/TabsComponent.tsx",[],"/home/conor/code/unison/front-end/src/ChartComponent.tsx",[],[],"/home/conor/code/unison/front-end/src/DateSelector.tsx",[],"/home/conor/code/unison/front-end/src/registerServiceWorker.js",["61","62"],"// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n",[],{"ruleId":"63","severity":1,"message":"64","line":71,"column":34,"nodeType":"65","messageId":"66","endLine":71,"endColumn":37,"suggestions":"67"},{"ruleId":"63","severity":1,"message":"64","line":157,"column":35,"nodeType":"65","messageId":"66","endLine":157,"endColumn":38,"suggestions":"68"},{"ruleId":"69","severity":1,"message":"70","line":21,"column":16,"nodeType":"71","messageId":"72","endLine":21,"endColumn":35},{"ruleId":"69","severity":1,"message":"70","line":111,"column":8,"nodeType":"71","messageId":"72","endLine":111,"endColumn":29},"@typescript-eslint/no-explicit-any","Unexpected any. Specify a different type.","TSAnyKeyword","unexpectedAny",["73","74"],["75","76"],"@typescript-eslint/explicit-module-boundary-types","Missing return type on function.","FunctionDeclaration","missingReturnType",{"messageId":"77","fix":"78","desc":"79"},{"messageId":"80","fix":"81","desc":"82"},{"messageId":"77","fix":"83","desc":"79"},{"messageId":"80","fix":"84","desc":"82"},"suggestUnknown",{"range":"85","text":"86"},"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct.","suggestNever",{"range":"85","text":"87"},"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of.",{"range":"88","text":"86"},{"range":"88","text":"87"},[1600,1603],"unknown","never",[3782,3785]]